# Copyright (c) 2015 Ultimaker B.V.
# Cura is released under the terms of the AGPLv3 or higher.

from distutils.core import setup
import py2exe
import UM
import UM.Qt
import cura
import os
import re
import shutil
import site
import Arcus
import scipy.spatial

# work around the limitation that shutil.copytree does not allow the target directory to exist
def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)

includes = [
    "sip", 
    "ctypes", 
    "UM",
    "PyQt5.QtNetwork", 
    "PyQt5._QOpenGLFunctions_2_0",
    "serial",
    "Arcus",
    "xml.etree",
    "xml.etree.ElementTree",
    "cura",
    "cura.OneAtATimeIterator",
    
    "scipy.cluster",
    "scipy.cluster._hierarchy",
    "scipy.cluster._vq",
    "scipy.fftpack",
    "scipy.fftpack.convolve",
    "scipy.fftpack._fftpack",
    "scipy.integrate",
    "scipy.integrate.lsoda",
    "scipy.integrate.vode",
    "scipy.integrate._dop",
    "scipy.integrate._odepack",
    "scipy.integrate._quadpack",
    "scipy.integrate._test_multivariate",
    "scipy.integrate._test_odeint_banded",
    "scipy.interpolate",
    "scipy.interpolate.dfitpack",
    "scipy.interpolate.interpnd",
    "scipy.interpolate._fitpack",
    "scipy.interpolate._interpolate",
    "scipy.interpolate._ppoly",
    "scipy.io.matlab",
    "scipy.io.matlab.mio5_utils",
    "scipy.io.matlab.mio_utils",
    "scipy.io.matlab.streams",
    "scipy.linalg",
    "scipy.linalg.cython_blas",
    "scipy.linalg.cython_lapack",
    "scipy.linalg._calc_lwork",
    "scipy.linalg._decomp_update",
    "scipy.linalg._fblas",
    "scipy.linalg._flapack",
    "scipy.linalg._flinalg",
    "scipy.linalg._interpolative",
    "scipy.linalg._solve_toeplitz",
    "scipy.ndimage",
    "scipy.ndimage._nd_image",
    "scipy.ndimage._ni_label",
    "scipy.odr",
    "scipy.odr.__odrpack",
    "scipy.optimize",
    "scipy.optimize.minpack2",
    "scipy.optimize.moduleTNC",
    "scipy.optimize._cobyla",
    "scipy.optimize._group_columns",
    "scipy.optimize._lbfgsb",
    "scipy.optimize._lsq/givens_elimination",
    "scipy.optimize._minpack",
    "scipy.optimize._nnls",
    "scipy.optimize._slsqp",
    "scipy.optimize._zeros",
    "scipy.signal",
    "scipy.signal.sigtools",
    "scipy.signal.spline",
    "scipy.signal._max_len_seq_inner",
    "scipy.signal._spectral",
    "scipy.sparse",
    "scipy.sparse.csgraph",
    "scipy.sparse.csgraph._min_spanning_tree",
    "scipy.sparse.csgraph._reordering",
    "scipy.sparse.csgraph._shortest_path",
    "scipy.sparse.csgraph._tools",
    "scipy.sparse.csgraph._traversal",
    "scipy.sparse.linalg",
    "scipy.sparse.linalg.dsolve._superlu",
    "scipy.sparse.linalg.eigen.arpack._arpack",
    "scipy.sparse.linalg.isolve._iterative",
    "scipy.sparse._csparsetools",
    "scipy.sparse._sparsetools",
    "scipy.spatial",
    "scipy.spatial.ckdtree",
    "scipy.spatial.qhull",
    "scipy.spatial._distance_wrap",
    "scipy.special.specfun",
    "scipy.special._ellip_harm_2",
    "scipy.special._ufuncs",
    "scipy.special._ufuncs_cxx",
    "scipy.stats",
    "scipy.stats.mvn",
    "scipy.stats.statlib",
    "scipy.stats.vonmises_cython",
    "scipy.stats._rank"
]

# Include all the UM modules in the includes. As py2exe fails to properly find all the dependencies due to the plugin architecture.
for dirpath, dirnames, filenames in os.walk(os.path.dirname(UM.__file__)):
    if "__" in dirpath:
        continue
    module_path = dirpath.replace(os.path.dirname(UM.__file__), "UM")
    module_path = module_path.split(os.path.sep)
    module_name = ".".join(module_path)
    if os.path.isfile(dirpath + "/__init__.py"):
        includes += [module_name]
        for filename in filenames:
            if "__" in filename or not filename.endswith(".py"):
                continue
            includes += [module_name + "." + os.path.splitext(filename)[0]]

for dirpath, dirnames, filenames in os.walk(os.path.dirname(cura.__file__)):
    if "__" in dirpath:
        continue
    module_path = dirpath.replace(os.path.dirname(cura.__file__), "cura")
    module_path = module_path.split(os.path.sep)
    module_name = ".".join(module_path)
    if os.path.isfile(dirpath + "/__init__.py"):
        includes += [module_name]
        for filename in filenames:
            if "__" in filename or not filename.endswith(".py"):
                continue
            includes += [module_name + "." + os.path.splitext(filename)[0]]

print("Removing previous distribution package")
shutil.rmtree("dist", True)

setup(
    name="Cura",
    version="@CURA_MAJOR_VERSION@.@CURA_MINOR_VERSION@.@CURA_PATCH_VERSION@",
    author="Ultimaker",
    author_email="a.hiemstra@ultimaker.com",
    url="http://software.ultimaker.com/",
    license="GNU AFFERO GENERAL PUBLIC LICENSE (AGPL)",
    scripts=["inst/bin/cura_app.py"],
    windows=[{"script": "inst/bin/cura_app.py", "dest_name": "Cura", "icon_resources": [(1, "@CMAKE_SOURCE_DIR@/cura.ico")]}],
    #console=[{"script": "cura_app.py"}],
    options={"py2exe": {"skip_archive": False, "includes": includes}}
)

print("Copying Cura plugins.")
copytree("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/uranium/plugins", "dist/plugins", ignore = shutil.ignore_patterns("OBJWriter", "MLPWriter", "MLPReader"))
copytree("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/cura/plugins", "dist/plugins")

print("Copying resources.")
copytree("@EXTERNALPROJECT_INSTALL_PREFIX@/share/uranium/resources", "dist/resources")
copytree("@EXTERNALPROJECT_INSTALL_PREFIX@/share/cura/resources", "dist/resources")

print("Coping Uranium QML.")
copytree("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/python3.4/site-packages/UM/Qt/qml/UM", "dist/qml/UM")

qt_lib_dir = None
qt_bin_dir = None
if os.path.exists("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/plugins"):
    qt_lib_dir = "@EXTERNALPROJECT_INSTALL_PREFIX@/lib"
    qt_bin_dir = "@EXTERNALPROJECT_INSTALL_PREFIX@/bin"
else:
    import PyQt5.QtCore
    qt_lib_dir = os.path.dirname(PyQt5.QtCore.__file__)
    qt_bin_dir = os.path.dirname(PyQt5.QtCore.__file__)

print("Copying Qt5 plugins")
copytree(os.path.join(qt_lib_dir, "plugins"), "dist/PyQt5/plugins")
print("Copying QtQuick plugins")
copytree(os.path.join(qt_lib_dir, "qml"), "dist/qml")
print("Copying Qt5 svg library")
shutil.copy(os.path.join(qt_bin_dir, "Qt5Svg.dll"), "dist/Qt5Svg.dll")

print("Copy CuraEngine")
shutil.copy("@EXTERNALPROJECT_INSTALL_PREFIX@/bin/CuraEngine.exe", "dist/CuraEngine.exe")
shutil.copy("@compiler_dir@/libstdc++-6.dll", "dist/libstdc++-6.dll")
shutil.copy("@compiler_dir@/libwinpthread-1.dll", "dist/libwinpthread-1.dll")
try:
    shutil.copy("@compiler_dir@/libgcc_s_seh-1.dll", "dist/libgcc_s_seh-1.dll")
except FileNotFoundError:
    shutil.copy("@compiler_dir@/libgcc_s_dw2-1.dll", "dist/libgcc_s_dw2-1.dll")

os.rename("dist/cura_app.exe", "dist/Cura.exe")
